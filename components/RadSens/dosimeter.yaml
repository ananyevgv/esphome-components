# TFT Driver	ST7789
# TFT_MISO	N/A
# TFT_MOSI	19
# TFT_SCLK	18
# TFT_CS	5
# TFT_DC	16
# TFT_RST	23
# TFT_BL	4
#
# 
# ADC_IN	34
# BUTTON1	35
# BUTTON2	0
# ADC Power	14

###########################################
##                                       ##
##  |GND|          |#|     |3.3|         ##   
##  |GND|          |#|     |SVP|         ##
##  | 21|  sda     |#|     | 37|         ##
##  | 22|  scl     |#|     | 38|         ##
##  | 17| puls     |#|     |SVN|         ##
##  |  2| speaker  |#|     | 32| RadSens ##
##  | 15|          |#|     | 33|         ## 
##  | 13|          |#|     | 25|         ##
##  | 12|          |#|     | 26|         ##
##  |GND|          |#|     | 27|         ##
##  |GND|          |#|     |GND|         ##
##  |3.3|          |#|     | 5V|         ##
###########################################

substitutions:
  name: dosimeter
  device_description: dosimeter

esphome: 
  comment: "${device_description}"
  name: "${name}"
  on_boot:
    then:
      - switch.turn_off: led
      - switch.turn_on: backlight
      - switch.turn_off: speaker

esp32:
  board: featheresp32
  flash_size: 16MB
  framework:
    type: arduino

external_components:
  - source: github://krbaker/esphome-radsens@v1.0.0
    components: [ radsens ]
    refresh: 600s

packages:
  lilygo_t_battery: !include packages/lilygo_t_battery.yaml
psram:
  mode: octal
  speed: 80MHz

api:
  password: !secret api_pass
  reboot_timeout: 0s
#Включаем загрузку по воздуху
ota:
  password: !secret ota_pass
  platform: esphome
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  id: wifi_id
logger:

i2c:
  sda: 21
  scl: 22
  scan: True

  
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

radsens:
  sensitivity: 105

color:
  - id: red
    red: 100%
    green: 30%
    blue: 30%

  - id: tred
    red: 100%
    green: 0%
    blue: 0%

  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

  - id: lyellow
    red: 100%
    green: 50%
    blue: 0%

  - id: green
    red: 0%
    green: 100%
    blue: 0%

  - id: lgreen
    red: 70%
    green: 100%
    blue: 0% 

  - id: blue
    red: 0%
    green: 100%
    blue: 100%

  - id: white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file:
      type: gfonts
      family: Roboto
    id: font0
    size: 30
    glyphs: |-
      0123456789 μ/RhnaДC
 
  - file:
      type: gfonts
      family: Roboto
    id: font1
    size: 20
    glyphs: |-
      0123456789абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz 
    
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: font2
    size: 35  

image:
  - file: mdi:radioactive
    id: i_radioactive
    resize: 70x70 
    type: BINARY
  - file: mdi:wifi-strength-1
    id: i_wifi1
    resize: 35x35 
    type: BINARY
  - file: mdi:wifi-strength-2
    id: i_wifi2
    resize: 35x35 
    type: BINARY
  - file: mdi:wifi-strength-3
    id: i_wifi3
    resize: 35x35 
    type: BINARY
  - file: mdi:wifi-strength-4
    id: i_wifi4
    resize: 35x35  
    type: BINARY
  - file: mdi:wifi-strength-off-outline
    id: i_wifioff
    resize: 35x35 
    type: BINARY

  - file: mdi:led-outline
    id: i_led
    resize: 35x35 
    type: BINARY
  - file: mdi:battery-high
    id: i_battery_high
    resize: 35x35 
    type: BINARY
  - file: mdi:battery-medium
    id: i_battery_medium
    resize: 35x35 
    type: BINARY
  - file: mdi:battery-low
    id: i_battery_low
    resize: 35x35 
    type: BINARY
  - file: mdi:battery-outline
    id: i_battery_outline
    resize: 35x35 
    type: BINARY
  - file: mdi:battery-off-outline
    id: i_battery_off_outline
    resize: 35x35 
    type: BINARY
  - file: mdi:battery-charging
    id: i_battery_charging
    resize: 35x35
    type: BINARY

  - file: mdi:flash-triangle
    id: i_flash
    resize: 35x35  
    type: BINARY
  - file: mdi:pulse
    id: i_pulse
    resize: 35x35
    type: BINARY
  - file: mdi:volume-high
    id: i_volume_high
    resize: 35x35     
    type: BINARY
  - file: mdi:volume-off
    id: i_volume_off
    resize: 35x35    
    type: BINARY

deep_sleep:
  run_duration: 10min
  id: rad_sleep
  wakeup_pin: 
    number: 35
    inverted: True
    allow_other_uses: true
  wakeup_pin_mode: IGNORE

sensor:
  - platform: radsens
    dynamic_intensity:
      name: "Dynamic Intensity"
      id: radD
    static_intensity:
      name: "Static Intensity"
      id: radS
    counts_per_minute:
      name: "Counts Per Minute"
      id: imp
    firmware_version:
      name: "Firmware"

  - platform: internal_temperature
    name: "${name} ESP32 T"


  - platform: wifi_signal
    name: "${name} Wifi"
    update_interval: 60s  
    id: wifi_signal_db
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${name} WiFi Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    id: WiFiP

 

binary_sensor:
  - platform: status
    name: "${name} API HA"
    id: system_status  

  - platform:  gpio
    pin: 
      number: 17
      inverted: true
      mode:
        input: true
        pulldown: true
    name: "${name} pulse"
    id: pulse

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: tdisplay_button_0
    on_click:
      then:
        - switch.toggle: speaker
    on_double_click:
      then:
        - deep_sleep.enter:
            id: rad_sleep  
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
      allow_other_uses: true
    id: tdisplay_button_35
    on_double_click:
      then:
        - switch.toggle: led

button:
  - platform: restart
    name: "${name} Restart"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${name} IP Address"
      icon: mdi:ip
    ssid:
      name: "${name} SSID"
      icon: mdi:access-point-network
    mac_address:
      name: "${name} Mac"
      icon: mdi:lan

switch:
  - platform: radsens
    control_led:
      name: "LED Indicator"
      #icon: mdi:led-outline
      id: led
    control_high_voltage:
      name: "High Voltage Generator"
      id: hvg
      restore_mode: RESTORE_DEFAULT_ON
    control_low_power:
      name: "low power mode"
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight  
    icon: mdi:message-alert-outline

  - platform: gpio
    pin: 
      number: GPIO2
      drive_strength: 40mA 
    name: "speaker"
    id: speaker
    icon: mdi:volume-mute

  - platform: gpio
    pin:
      number: GPIO32
      drive_strength: 40mA
    name: radsens   
    id: radsens_on
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:radioactive-off

display:
  - platform: ili9xxx #st7789v
    model: ST7789V #TTGO TDisplay 135x240
    id: rad_display
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    dimensions:
      height: 240
      width: 135
      offset_height: 40
      offset_width: 52
    # Required or the colors are all inverted, and Black screen is White
    invert_colors: true
    rotation: 90°
    update_interval: 1s
    lambda: |-
      if (id(led).state) {
        it.image(100, 0, id(i_led), blue);
      } 
      if (id(hvg).state) {
        it.image(135, 0, id(i_flash), yellow);
      } 
      it.printf(0, 105, id(font1), white, "%0.0f imp", id(imp).state); 
      if (id(speaker).state) {
        it.image(205, 105, id(i_volume_high), white);
      } 
      else {
        it.image(205, 105, id(i_volume_off), white);
      }
      if (id(wifi_id).is_connected()) {
        it.strftime(0, 0, id(font2),"%H %M", id(sntp_time).now());
        static int i = 0;
        i++;
        if ((i % 2) == 0) 
          it.print(39, 0, id(font2),":");
      }
      uint16_t var = (id(WiFiP).state);
      switch (var) {
        case 0 ... 24: it.image(170, 0, id(i_wifi1), red); break;
        case 25 ... 49: it.image(170, 0, id(i_wifi2), yellow); break;
        case 50 ... 74: it.image(170, 0, id(i_wifi3), lgreen); break;
        case 75 ... 100: it.image(170, 0, id(i_wifi4), green); break;
        default: it.image(170, 0, id(i_wifioff), red); break;
      }

      it.image(0, 35, id(i_radioactive), yellow);

      uint16_t D = (id(radD).state);
      switch (D) {
        case 0 ... 20: 
          it.printf(70, 35, id(font0), green, "Д %3.0f μR/h", id(radD).state);
          it.print(140, 105, id(font1), green, TextAlign::TOP_CENTER,"норма");
          break;
        case 21 ... 40:
          it.printf(70, 35, id(font0), lgreen, "Д %3.0f μR/h", id(radD).state); 
          it.print(140, 105, id(font1), green, TextAlign::TOP_CENTER,"допустимо");
          break;
        case 41 ... 60: 
          it.printf(70, 35, id(font0), yellow, "Д %3.0f μR/h", id(radD).state); 
          it.print(140, 105, id(font1), green, TextAlign::TOP_CENTER,"допустимо");
          break;
        case 61 ... 120: 
          it.printf(70, 35, id(font0), red, "Д %3.0f μR/h", id(radD).state); 
          it.print(140, 105, id(font1), green, TextAlign::TOP_CENTER, "превышение");
          break;
        case 121 ... 999: 
          it.printf(70, 35, id(font0), tred, "Д %3.0f μR/h", id(radD).state); 
          it.print(140, 105, id(font1), green, TextAlign::TOP_CENTER,"писец");
          break;
        case 1000 ... 32000: 
          it.printf(70, 35, id(font0), tred, "Д %3.0f mR/h", (id(radD).state)/1000); 
          it.print(140, 105, id(font1), green, TextAlign::TOP_CENTER,"полнписец");
          break;
        default: 
          it.printf(70, 35, id(font0), blue, "Д %3.0f μR/h", id(radD).state); 
          break;
      }

      uint16_t S = (id(radS).state);
      switch (S) {
        case 0 ... 20: it.printf(70, 70, id(font0), green, "C %3.0f μR/h", id(radS).state); break;
        case 21 ... 40: it.printf(70, 70, id(font0), lgreen, "C %3.0f μR/h", id(radS).state); break;
        case 41 ... 60: it.printf(70, 70, id(font0), yellow, "C %3.0f μR/h", id(radS).state); break;
        case 61 ... 120: it.printf(70, 70, id(font0), red, "C %3.0f μR/h", id(radS).state); break;
        case 121 ... 999: it.printf(70, 70, id(font0), tred, "C %3.0f μR/h", id(radS).state); break;
        case 1000 ... 32000: it.printf(70, 35, id(font0), red, "C %3.0f mR/h", (id(radS).state)/1000); break;
        default: it.printf(70, 70, id(font0), blue, "C %3.0f μR/h", id(radS).state); break;
      }

      if (id(vbus).state) {
        it.image(205, 0, id(i_battery_charging), green);
      }
      else {
        uint16_t bat = (id(batt).state);
        switch (bat) {
          case 0 ... 9: it.image(205, 0, id(i_battery_off_outline), tred); break;
          case 10 ... 19: it.image(205, 0, id(i_battery_outline), red); break;
          case 20 ... 49: it.image(205, 0, id(i_battery_low), yellow); break;
          case 50 ... 79: it.image(205, 0, id(i_battery_medium), lgreen); break;
          case 80 ... 100: it.image(205, 0, id(i_battery_high), green); break;        
          default: it.image(205, 0, id(i_battery_high), blue); break;
        }
      }
time:
  - platform: sntp
    id: sntp_time

web_server:
  version: 3  
  port: 80
  local: true
  auth:
    username: !secret web_user
    password: !secret web_pass   
